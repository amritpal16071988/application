#!groovy
pipeline {
agent {
  label 'ansible'
}
  parameters {
    string (name: 'app_version', description: 'Please enter the app_version')
  }  
  stages {  
    stage('Scanning_code') {
        when {
          anyOf{
            branch 'dev';
            allOf{
               branch 'qa' 
               expression { app_version ==~ /G.R.C./ }
            }
          }
          beforeOptions true
        }      
      steps {
        sh ''' 
          echo "Run Sonar Scan"
        '''
      }
    }
      stage('Build') {
        when {
          anyOf{
            branch 'dev';
            allOf{
               branch 'qa' 
               expression { app_version ==~ /G.R.C./ }
            }
          }
          beforeOptions true
        }
      steps {
        sh ''' 
          echo "building application"
        '''
      }
    }  
    stage('dev_Software_deployment') {
      when {
        branch 'dev'
        beforeOptions true
      }      
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'dev_key', keyFileVariable: 'ssh_key')]) {        
        sh '''
          TARGET_IP=$(terraform output -state=/terraform_state_file/$BRANCH_NAME/terraform.tfstate -json instance_address) 
          ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook deployment.yaml -e target_ip="$TARGET_IP" -e BRANCH_NAME=$BRANCH_NAME -e APP_VERSION=$app_version --private-key=$ssh_key
        '''
        }
      }
    }
    stage('qa_Software_deployment') {
      when {
        branch 'qa'
        expression { app_version ==~ /G.R.C./ }
        beforeOptions true
      }      
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'qa_key', keyFileVariable: 'ssh_key')]) {        
        sh ''' 
          TARGET_IP=$(terraform output -state=/terraform_state_file/$BRANCH_NAME/terraform.tfstate -json instance_address) 
          ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook deployment.yaml -e target_ip="$TARGET_IP" -e BRANCH_NAME=$BRANCH_NAME -e APP_VERSION=$app_version --private-key=$ssh_key
        '''
        }
      }
    } 
    stage('uat_Software_deployment') {
      when {
        branch 'uat'
        expression { app_version ==~ /G.R.C./ }
        beforeOptions true
      }      
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'uat_key', keyFileVariable: 'ssh_key')]) {        
        sh ''' 
          TARGET_IP=$(terraform output -state=/terraform_state_file/$BRANCH_NAME/terraform.tfstate -json instance_address) 
          ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook deployment.yaml -e target_ip="$TARGET_IP" -e BRANCH_NAME=$BRANCH_NAME -e APP_VERSION=$app_version --private-key=$ssh_key
        '''
        }
      }
    }
    stage('prod_Software_deployment') {
      when {
        branch 'prod'
        expression { app_version ==~ /G.R.C./ }
        beforeOptions true
      }      
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'prod_key', keyFileVariable: 'ssh_key')]) {        
        sh ''' 
          TARGET_IP=$(terraform output -state=/terraform_state_file/$BRANCH_NAME/terraform.tfstate -json instance_address) 
          ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook deployment.yaml -e target_ip="$TARGET_IP" -e BRANCH_NAME=$BRANCH_NAME -e APP_VERSION=$app_version --private-key=$ssh_key
        '''
        }
      }
    }
    stage('Sanity_check') {   
      steps {
        sh '''
        echo "Checking the $BRANCH_NAME application health"
        TARGET_DNS=$(terraform output -state=/terraform_state_file/$BRANCH_NAME/terraform.tfstate -json ec2_publicdns|tr -d '\"[]')
        STATUS=$(curl -s http://$TARGET_DNS -I |grep 'HTTP/1.1'|awk '{print $2}')
        if [ $STATUS -eq 200 ]
        then
          if [ "$BRANCH_NAME" = 'dev' ]
          then
            echo "INFO" "Application is deployed without verison on dev"
          else
            echo "INFO" "Application is deployed with $app_version"
          fi
        else
          echo "ERROR" "Application is failing please rollback"
          exit 1
        fi
        '''
      }
    }  
  } 
  post {
    always {
      cleanWs()
    }
  }
}
